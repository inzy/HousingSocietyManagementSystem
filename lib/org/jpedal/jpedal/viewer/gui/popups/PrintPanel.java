/*
 * ===========================================
 * Java Pdf Extraction Decoding Access Library
 * ===========================================
 *
 * Project Info:  http://www.idrsolutions.com
 * Help section for developers at http://www.idrsolutions.com/support/
 *
 * (C) Copyright 1997-2015 IDRsolutions and Contributors.
 *
 * This file is part of JPedal/JPDF2HTML5
 *
 
 *
 * ---------------
 * PrintPanel.java
 * ---------------
 */
package org.jpedal.examples.viewer.gui.popups;

import java.awt.*;
import java.awt.event.*;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.text.NumberFormat;
import java.util.ArrayList;
import javax.print.DocFlavor;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.attribute.SetOfIntegerSyntax;
import javax.print.attribute.standard.PageRanges;
import javax.print.attribute.standard.PrinterResolution;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import org.jpedal.display.Display;
import org.jpedal.*;
import org.jpedal.examples.viewer.paper.MarginPaper;
import org.jpedal.examples.viewer.paper.PaperSizes;
import org.jpedal.examples.viewer.gui.GUI;
import org.jpedal.exception.PdfException;
import org.jpedal.io.ColorSpaceConvertor;
import org.jpedal.objects.PrinterOptions;
import org.jpedal.utils.LogWriter;
import org.jpedal.utils.Messages;

public class PrintPanel extends javax.swing.JPanel implements PrintPanelInt{

    private boolean debugPrinterChange;
    	
    int pageCount, currentPage, currentPreviewedPage=1, pagePrintCount=1;
    private boolean okClicked;

    private String[] printersList;
        
    private final PaperSizes paperDefinitions;

    private int defaultResolution;

    private boolean isFirstTime=true;

    private static final double mmPerSubInch = 25.4 / 72;
    
    
    private final PdfDecoderInt pdf;

    public PrintPanel(final String[] printersList, final String defaultPrinter, final PaperSizes paperDefinitions, final int defaultResolution, final int pageNumber, final PdfDecoderInt decoder) {

        pdf = decoder;
        pageCount = pdf.getPageCount();
        currentPage = pageNumber;

        this.defaultResolution = defaultResolution;

        this.paperDefinitions = paperDefinitions;

    	resetDefaults(printersList, defaultPrinter, pageCount, currentPage);

    	isFirstTime=false;
    }

    @Override
    public void resetDefaults(final String[] printersList, final String defaultPrinter, final int pageCount, final int currentPage) {

    	//this.defaultPrinter=defaultPrinter;
    	this.printersList = printersList;
    	this.pageCount = pageCount;
    	this.currentPage = currentPage;

    	initComponents();

        if (pageSize.getItemCount()==0) {
            return;
        }

        final int defaultPagesize = paperDefinitions.getDefaultPageIndex();
        if (defaultPagesize < pageSize.getModel().getSize()) {
            pageSize.setSelectedIndex(defaultPagesize);
        }
    	
    	/**set selected printer*/
    	final String printerFlag=System.getProperty("org.jpedal.defaultPrinter");
    	if(printerFlag!=null){
            for (final String aPrintersList : printersList) {
                if (printerFlag.equals(aPrintersList)) {
                    printerName.setSelectedItem(aPrintersList);
                }
            }
    	}else{
    		printerName.setSelectedItem(defaultPrinter);
    	} 
    	
    	
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    @SuppressWarnings("OverlyLongMethod")
    private void initComponents() {
    	
    	if(isFirstTime){
	        buttonGroup1 = new javax.swing.ButtonGroup();
	        printerPanel = new javax.swing.JPanel();
	        jLabel1 = new javax.swing.JLabel();
	        jLabel2 = new javax.swing.JLabel();        
	        tabbedPane = new javax.swing.JTabbedPane();
	        printerName = new javax.swing.JComboBox();
	        pageSize = new javax.swing.JComboBox();
            jLabel10 = new JLabel();
            jLabel11 = new javax.swing.JLabel();
            jLabel12 = new javax.swing.JLabel();
            jLabel13 = new javax.swing.JLabel();
            jLabel14 = new javax.swing.JLabel();
            jLabel15 = new javax.swing.JLabel();
            left = new javax.swing.JSpinner();
            right = new javax.swing.JSpinner();
            top = new javax.swing.JSpinner();
            bottom = new javax.swing.JSpinner();
            resolution = new javax.swing.JComboBox();
	        printRangePanel = new javax.swing.JPanel();
	        pagesFrom = new javax.swing.JTextField();
	        printRangeCurrentPage = new javax.swing.JRadioButton();
	        printRangeAll = new javax.swing.JRadioButton();
	        printRangeCurrentView = new javax.swing.JRadioButton();
	        printRangeFrom = new javax.swing.JRadioButton();
	        jLabel4 = new javax.swing.JLabel();
	        printRangeSubset = new javax.swing.JComboBox();
	        printRangeReversePages = new javax.swing.JCheckBox();
	        jLabel7 = new javax.swing.JLabel();
	        pagesTo = new javax.swing.JTextField();
	        pageHandlingPanel = new javax.swing.JPanel();
	        previewPanel = new javax.swing.JPanel();
            previewComponent = new javax.swing.JComponent(){
                @Override
                public void paintComponent(final Graphics g){
                    printPreview((Graphics2D)g);
                }
            };
            previewSlider = new CustomSlider();
	        jLabel8 = new javax.swing.JLabel();
	        printHandlingCopies = new javax.swing.JSpinner();
	        jLabel9 = new javax.swing.JLabel();
	        printHandlingScaling = new javax.swing.JComboBox();
	        autoRotateCenter = new javax.swing.JCheckBox();
	        paperSourceByPDF = new javax.swing.JCheckBox();
	        grayscale = new javax.swing.JCheckBox();
            //printToFile = new javax.swing.JCheckBox();
	        okButton = new javax.swing.JButton();
	        
	        cancelButton = new javax.swing.JButton();
	
    	}else {
            this.removeAll();
        }
        
        setLayout(null);

        add(tabbedPane);
        tabbedPane.setBounds(10,7,400,330);


        /**
         * START Printer PANEL
         */
        printerPanel.setLayout(new GridBagLayout());
        final GridBagConstraints gbc = new GridBagConstraints();
        
//        printerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
//        Messages.getMessage("PdfViewerLabel.Printer"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
//        javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255)));
        
        jLabel1.setText(Messages.getMessage("PdfViewerPrint.Name"));
        gbc.gridx=0;
        gbc.gridy=0;
        gbc.gridwidth=1;
        gbc.fill=GridBagConstraints.HORIZONTAL;
        gbc.insets=new Insets(5,5,5,5);
        printerPanel.add(jLabel1,gbc);
        //jLabel1.setBounds(10, 20, 60, 14);
        
        jLabel2.setText(Messages.getMessage("PdfViewerPrint.PageSize"));
        gbc.gridx=0;
        gbc.gridy=1;
        gbc.gridwidth=1;
        printerPanel.add(jLabel2,gbc);
        //jLabel2.setBounds(10, 52, 70, 14);

        printerName.setModel(new javax.swing.DefaultComboBoxModel(printersList));
        gbc.gridx=1;
        gbc.gridy=0;
        gbc.gridwidth=5;
        printerPanel.add(printerName,gbc);
        //printerName.setBounds(90, 20, 290, 22);
        printerName.addItemListener(new ItemListener(){
            @Override
            public void itemStateChanged(final ItemEvent e) {
                if (debugPrinterChange) {
                    System.out.println("itemStateChanged");
                }
                previewComponent.repaint();
                if (debugPrinterChange) {
                    System.out.println("repainted preview component");
                }
                okButton.setEnabled(false);
                pageSize.setEnabled(false);
                pageSize.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Loading..."}));
                resolution.setEnabled(false);
                resolution.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Loading..."}));
                if (debugPrinterChange) {
                    System.out.println("GUI options disabled");
                }
                final Thread t = new Thread() {
                    @Override
                    public void run() {
                        if (debugPrinterChange) {
                            System.out.println("Thread invoked.");
                        }
                        final PrintService[] ps = PrintServiceLookup.lookupPrintServices(null,null);
                        if (debugPrinterChange) {
                            System.out.println("Found print services.");
                        }
                        PrintService p=null;
                        for (final PrintService p1 : ps) {
                            if (debugPrinterChange) {
                                System.out.println("checking " + p1.getName());
                            }
                            if (p1.getName().equals(printerName.getSelectedItem())) {
                                p = p1;
                                if (debugPrinterChange) {
                                    System.out.println("Match!");
                                }
                            }
                        }

                        if (p!=null) {
                            if (debugPrinterChange) {
                                System.out.println("Getting available resolutions...");
                            }
                            resolution.setModel(new javax.swing.DefaultComboBoxModel(getAvailableResolutions(p)));
                            if (debugPrinterChange) {
                                System.out.println("Getting default resolution...");
                            }
                            final int resInd = getDefaultResolutionIndex();
                            if (resolution.getModel().getSize() > resInd) {
                                resolution.setSelectedIndex(resInd);
                            }
                            resolution.setEnabled(true);
                            paperDefinitions.setPrintService(p);
                            if (debugPrinterChange) {
                                System.out.println("Getting available paper sizes...");
                            }
                            pageSize.setModel(new javax.swing.DefaultComboBoxModel(getAvailablePaperSizes()));
                            if (debugPrinterChange) {
                                System.out.println("Getting default pagesize...");
                            }
                            final int pageInd = paperDefinitions.getDefaultPageIndex();
                            if (pageSize.getModel().getSize() > pageInd) {
                                pageSize.setSelectedIndex(pageInd);
                            }
                            pageSize.setEnabled(true);
                            okButton.setEnabled(true);
                            if (debugPrinterChange) {
                                System.out.println("Reenabled GUI");
                            }
                        }

                        if (debugPrinterChange) {
                            System.out.println("Updating margins");
                        }
                        updateMargins();

                    }
                };
                t.setDaemon(true);
                if (debugPrinterChange) {
                    System.out.println("Invoking update thread...");
                }
                SwingUtilities.invokeLater(t);
            }
        });
        final Thread t = new Thread() {

			@Override
            public void run() {
                final PrintService[] ps = PrintServiceLookup.lookupPrintServices(null,null);
                PrintService p=null;
                for (final PrintService p1 : ps) {
                    if (p1.getName().equals(printerName.getSelectedItem())) {
                        p = p1;
                    }
                }

                if (p!=null) {
                    paperDefinitions.setPrintService(p);
                    resolution.setModel(new javax.swing.DefaultComboBoxModel(getAvailableResolutions(p)));
                    final int defaultResolution = getDefaultResolutionIndex();
                    if (resolution.getModel().getSize() > defaultResolution) {
                        resolution.setSelectedIndex(defaultResolution);
                    }
                    resolution.setEnabled(true);
                    pageSize.setModel(new javax.swing.DefaultComboBoxModel(getAvailablePaperSizes()));
                    final int defaultPageSize = paperDefinitions.getDefaultPageIndex();
                    if (defaultPageSize < pageSize.getModel().getSize()) {
                        pageSize.setSelectedIndex(defaultPageSize);
                    }
                    pageSize.setEnabled(true);
                    okButton.setEnabled(true);
                }

                updateMargins();
            }
        };
        t.setDaemon(true);
        pageSize.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Loading..."}));
        pageSize.setEnabled(false);
        resolution.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Loading..."}));
        resolution.setEnabled(false);
        okButton.setEnabled(false);
        t.start();

        pageSize.addItemListener(new ItemListener(){
            @Override
            public void itemStateChanged(final ItemEvent e) {
                updatePreview();
                updateMargins();
            }
        });
      
        gbc.gridx=1;
        gbc.gridy=1;
        gbc.gridwidth=5;
        printerPanel.add(pageSize,gbc);
        //pageSize.setBounds(90, 49, 290, 22);

        jLabel10.setText(Messages.getMessage("PdfViewerPrintMargins.margin"));
        gbc.gridx=0;
        gbc.gridy=2;
        gbc.gridwidth=1;
        printerPanel.add(jLabel10,gbc);
        //jLabel10.setBounds(10, 85, 150, 22);

        jLabel11.setText(Messages.getMessage("PdfViewerPrintMargins.left"));
        gbc.gridx=1;
        gbc.gridy=2;
        gbc.gridwidth=1;
        printerPanel.add(jLabel11,gbc);
        //jLabel11.setBounds(105,85,100,22);

        left.setModel(new CustomSpinnerModel());
        //left.setBounds(140,85,65,22);
        gbc.gridx=2;
        gbc.gridy=2;
        gbc.gridwidth=1;
        left.setMinimumSize(new Dimension(65, 22));
        left.setPreferredSize(new Dimension(65, 22));
        printerPanel.add(left,gbc);

        jLabel12.setText(Messages.getMessage("PdfViewerPrintMargins.right"));
        gbc.gridx=3;
        gbc.gridy=2;
        gbc.gridwidth=1;
        printerPanel.add(jLabel12,gbc);
        //jLabel12.setBounds(255,85,100,22);

        right.setModel(new CustomSpinnerModel());
        //right.setBounds(300,85,65,22);
        gbc.gridx=4;
        gbc.gridy=2;
        gbc.gridwidth=1;
        right.setMinimumSize(new Dimension(65, 22));
        right.setPreferredSize(new Dimension(65, 22));
        printerPanel.add(right,gbc);

        jLabel13.setText(Messages.getMessage("PdfViewerPrintMargins.top"));
        gbc.gridx=1;
        gbc.gridy=3;
        gbc.gridwidth=1;
        printerPanel.add(jLabel13,gbc);
        //jLabel13.setBounds(105,116,100,22);

        top.setModel(new CustomSpinnerModel());
        //top.setBounds(140,116,65,22);
        gbc.gridx=2;
        gbc.gridy=3;
        gbc.gridwidth=1;
        top.setMinimumSize(new Dimension(65, 22));
        top.setPreferredSize(new Dimension(65, 22));
        printerPanel.add(top,gbc);

        jLabel14.setText(Messages.getMessage("PdfViewerPrintMargins.bottom"));
        gbc.gridx=3;
        gbc.gridy=3;
        gbc.gridwidth=1;
        printerPanel.add(jLabel14,gbc);
        //jLabel14.setBounds(255,116,100,22);

        bottom.setModel(new CustomSpinnerModel());
        //bottom.setBounds(300,116,65,22);
        gbc.gridx=4;
        gbc.gridy=3;
        gbc.gridwidth=1;
        bottom.setMinimumSize(new Dimension(65, 22));
        bottom.setPreferredSize(new Dimension(65, 22));
        printerPanel.add(bottom,gbc);

        final ChangeListener marginListener = new ChangeListener() {
            static final double mmToSubInch = 72 / 25.4;

            @Override
            public void stateChanged(final ChangeEvent e) {
                final MarginPaper paper = getSelectedPaper();
                if (paper==null) {
                    return;
                }

                final double l = (Double) left.getValue() *mmToSubInch;
                final double r = (Double) right.getValue() *mmToSubInch;
                final double t = (Double) top.getValue() *mmToSubInch;
                final double b = (Double) bottom.getValue() *mmToSubInch;
                paper.setImageableArea(l, t, (paper.getWidth()-l)-r, (paper.getHeight()-t)-b);
                updatePreview();
            }
        };
        left.addChangeListener(marginListener);
        right.addChangeListener(marginListener);
        top.addChangeListener(marginListener);
        bottom.addChangeListener(marginListener);

        jLabel15.setText(Messages.getMessage("PdfViewerPrintResolution.text"));
        gbc.gridx=0;
        gbc.gridy=4;
        gbc.gridwidth=1;
        printerPanel.add(jLabel15,gbc);
        //jLabel15.setBounds(10, 153, 80, 22);
        
        gbc.gridx=1;
        gbc.gridy=4;
        gbc.gridwidth=5;
        printerPanel.add(resolution,gbc);
        //resolution.setBounds(90, 153, 290, 22);

        tabbedPane.addTab(Messages.getMessage("PdfViewerPrintTab.printer"), printerPanel);
//        add(printerPanel);
//        printerPanel.setBounds(10, 7, 520, 158);
        /**
         * END Printer PANEL
         */

        /**
         * START Print Range PANEL
         */
        printRangePanel.setLayout(new GridBagLayout());

//        printRangePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
//        		Messages.getMessage("PdfViewerLabel.PrintRange"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
//        javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font(
//        		"Tahoma", 0, 11), new java.awt.Color(0, 0, 255)));
        
        pagesFrom.setText("1");
        pagesFrom.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(final java.awt.event.MouseEvent evt) {
                pagesBoxPressed();
            }
        });

        gbc.gridx=1;
        gbc.gridy=3;
        gbc.gridwidth=1;
        pagesFrom.setMinimumSize(new Dimension(65,22));
        pagesFrom.setPreferredSize(new Dimension(65,22));
        gbc.insets = new Insets(0,0,0,0);
        printRangePanel.add(pagesFrom,gbc);
        gbc.insets = new Insets(5,5,5,5);
        
        buttonGroup1.add(printRangeCurrentPage);
        printRangeCurrentPage.setText(Messages.getMessage("PdfViewerRadioButton.CurrentPage"));
        printRangeCurrentPage.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        printRangeCurrentPage.setMargin(new java.awt.Insets(0, 0, 0, 0));
        printRangeCurrentPage.setOpaque(false);
        printRangeCurrentPage.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(final java.awt.event.ItemEvent evt) {
                currentPageStateChanged();
            }
        });

        gbc.gridx=0;
        gbc.gridy=2;
        gbc.gridwidth=1;
        printRangePanel.add(printRangeCurrentPage,gbc);
//        printRangeCurrentPage.setBounds(20, 64, 120, 15);

        buttonGroup1.add(printRangeAll);
        printRangeAll.setSelected(true);
        printRangeAll.setText(Messages.getMessage("PdfViewerRadioButton.All"));
        printRangeAll.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        printRangeAll.setMargin(new java.awt.Insets(0, 0, 0, 0));
        printRangeAll.setOpaque(false);
        
        if(isFirstTime){
	        printRangeAll.addItemListener(new java.awt.event.ItemListener() {
	            @Override
                public void itemStateChanged(final java.awt.event.ItemEvent evt) {
	                allStateChanged();
	            }
	        });
        }

        gbc.gridx=0;
        gbc.gridy=0;
        gbc.gridwidth=1;
        printRangePanel.add(printRangeAll,gbc);
//        printRangeAll.setBounds(20, 20, 70, 15);

        buttonGroup1.add(printRangeCurrentView);
        printRangeCurrentView.setText(Messages.getMessage("PdfViewerPrint.CurrentView"));
        printRangeCurrentView.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        printRangeCurrentView.setEnabled(true);
        printRangeCurrentView.setMargin(new java.awt.Insets(0, 0, 0, 0));
        printRangeCurrentView.setOpaque(false);
        gbc.gridx=0;
        gbc.gridy=1;
        gbc.gridwidth=1;
        printRangePanel.add(printRangeCurrentView,gbc);
//        printRangeCurrentView.setBounds(20, 42, 140, 15);

        //Disable in non single mode
        if (pdf.getDisplayView()!= Display.SINGLE_PAGE) {
            printRangeCurrentView.setEnabled(false);
            printRangeCurrentView.setToolTipText(Messages.getMessage("PageLayoutMessage.SinglePageOnly"));
        } else {
            printRangeCurrentView.setEnabled(true);
            printRangeCurrentView.setToolTipText(null);
        }

        if(isFirstTime){
        	printRangeCurrentView.addItemListener(new java.awt.event.ItemListener() {
	            @Override
                public void itemStateChanged(final java.awt.event.ItemEvent evt) {
	            	printRangeCurrentView();
	                
	            }
	        });
        }

        buttonGroup1.add(printRangeFrom);
        printRangeFrom.setText(Messages.getMessage("PdfViewerPrint.PagesFrom"));
        printRangeFrom.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        printRangeFrom.setMargin(new java.awt.Insets(0, 0, 0, 0));
        printRangeFrom.setOpaque(false);
        
        if(isFirstTime){
	        printRangeFrom.addItemListener(new java.awt.event.ItemListener() {
	            @Override
                public void itemStateChanged(final java.awt.event.ItemEvent evt) {
	                pagesFromStateChanged();
	            }
	        });
        }

        gbc.gridx=0;
        gbc.gridy=3;
        gbc.gridwidth=1;
        printRangePanel.add(printRangeFrom,gbc);
//        printRangeFrom.setBounds(20, 86, 140, 15);

        jLabel4.setText(Messages.getMessage("PdfViewerPrint.Subset"));
        gbc.gridx=0;
        gbc.gridy=4;
        gbc.gridwidth=1;
        printRangePanel.add(jLabel4,gbc);
//        jLabel4.setBounds(10, 125, 100, 14);

        printRangeSubset.setModel(new javax.swing.DefaultComboBoxModel(new String[] { 
        		Messages.getMessage("PdfViewerPrint.AllPagesInRange"), Messages.getMessage("PdfViewerPrint.OddPagesOnly")
        		, Messages.getMessage("PdfViewerPrint.EvenPagesOnly") }));
        gbc.gridx=1;
        gbc.gridy=4;
        gbc.gridwidth=4;
        gbc.insets = new Insets(5,0,5,0);
        printRangePanel.add(printRangeSubset,gbc);
        gbc.insets = new Insets(5,5,5,5);
//        printRangeSubset.setBounds(90, 122, 290, 22);
        printRangeSubset.addItemListener(new ItemListener(){
            @Override
            public void itemStateChanged(final ItemEvent e) {
                updatePreview();
            }
        });

        printRangeReversePages.setText(Messages.getMessage("PdfViewerPrint.ReversePages"));
        printRangeReversePages.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        printRangeReversePages.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gbc.gridx=0;
        gbc.gridy=5;
        gbc.gridwidth=3;
        printRangePanel.add(printRangeReversePages,gbc);
//        printRangeReversePages.setBounds(20, 160, 120, 15);
        printRangeReversePages.addItemListener(new ItemListener(){
            @Override
            public void itemStateChanged(final ItemEvent e) {
                updatePreview();
            }
        });

        jLabel7.setText(Messages.getMessage("PdfViewerPrint.PagesTo"));
        gbc.gridx=2;
        gbc.gridy=3;
        gbc.gridwidth=1;
        printRangePanel.add(jLabel7,gbc);
//        jLabel7.setBounds(190, 86, 30, 14);

        pagesTo.setText(String.valueOf(pageCount));
        
        if(isFirstTime){
	        pagesTo.addMouseListener(new java.awt.event.MouseAdapter() {
	            @Override
                public void mousePressed(final java.awt.event.MouseEvent evt) {
	                pagesBoxPressed();
	            }
	        });
        }
        gbc.gridx=3;
        gbc.gridy=3;
        gbc.gridwidth=1;
        pagesTo.setMinimumSize(new Dimension(65,22));
        pagesTo.setPreferredSize(new Dimension(65,22));
        gbc.insets = new Insets(0,0,0,0);
        printRangePanel.add(pagesTo,gbc);
        gbc.insets = new Insets(5,5,5,5);

        tabbedPane.addTab(Messages.getMessage("PdfViewerPrintTab.range"),printRangePanel);
//        add(printRangePanel);
//        printRangePanel.setBounds(10, 140, 320, 160);
        /**
         * END Print Range PANEL
         */



        /**
         * START Page Handling PANEL
         */
        pageHandlingPanel.setLayout(new GridBagLayout());

//        pageHandlingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
//        Messages.getMessage("PdfViewerLabel.PageHandling"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
//        javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11),
//        new java.awt.Color(0, 0, 255)));
        
        jLabel8.setText(Messages.getMessage("PdfViewerPrint.Copies"));
        gbc.gridx=0;
        gbc.gridy=0;
        gbc.gridwidth=1;
        pageHandlingPanel.add(jLabel8,gbc);
//        jLabel8.setBounds(10, 20, 50, 14);

        printHandlingCopies.setModel(new SpinnerNumberModel(1, 1, 1000, 1));
        gbc.gridx=1;
        gbc.gridy=0;
        gbc.gridwidth=1;
        gbc.fill=GridBagConstraints.VERTICAL;
        gbc.insets = new Insets(0,0,0,0);
        gbc.anchor=GridBagConstraints.WEST;
        printHandlingCopies.setMinimumSize(new Dimension(65, 22));
        printHandlingCopies.setPreferredSize(new Dimension(65, 22));
        pageHandlingPanel.add(printHandlingCopies,gbc);
//        printHandlingCopies.setBounds(90, 17, 60, 20);
        gbc.fill=GridBagConstraints.HORIZONTAL;
        gbc.anchor=GridBagConstraints.CENTER;
        gbc.insets = new Insets(5,5,5,5);

        jLabel9.setText(Messages.getMessage("PdfViewerPrint.PageScaling"));
        gbc.gridx=0;
        gbc.gridy=1;
        gbc.gridwidth=1;
        pageHandlingPanel.add(jLabel9,gbc);
        //jLabel9.setBounds(10, 50, 120, 14);

        printHandlingScaling.setModel(new javax.swing.DefaultComboBoxModel(PrinterOptions.PRINT_SCALING_OPTIONS));
        printHandlingScaling.setSelectedIndex(PrinterOptions.LAST_SCALING_CHOICE);
        gbc.gridx=1;
        gbc.gridy=1;
        gbc.gridwidth=1;
        gbc.insets = new Insets(5,0,5,0);
        pageHandlingPanel.add(printHandlingScaling,gbc);
        gbc.insets = new Insets(5,5,5,5);
        //printHandlingScaling.setBounds(90, 47, 290, 22);
        printHandlingScaling.addItemListener(new ItemListener(){
            @Override
            public void itemStateChanged(final ItemEvent e) {
                updatePreview();
            }
        });

        autoRotateCenter.setSelected(true);
        autoRotateCenter.setText((Messages.getMessage("PdfViewerPrint.AutoRotateAndCenter")));
        autoRotateCenter.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        autoRotateCenter.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gbc.gridx=0;
        gbc.gridy=2;
        gbc.gridwidth=1;
        pageHandlingPanel.add(autoRotateCenter,gbc);
        //autoRotateCenter.setBounds(20, 88, 260, 15);
        autoRotateCenter.addItemListener(new ItemListener(){
            @Override
            public void itemStateChanged(final ItemEvent e) {
                updatePreview();
            }
        });

        paperSourceByPDF.setText(Messages.getMessage("PdfViewerPrint.ChoosePaperByPdfSize"));
        paperSourceByPDF.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        paperSourceByPDF.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gbc.gridx=0;
        gbc.gridy=3;
        gbc.gridwidth=2;
        pageHandlingPanel.add(paperSourceByPDF,gbc);
        //paperSourceByPDF.setBounds(20, 112, 300, 15);
        paperSourceByPDF.addItemListener(new ItemListener(){
            @Override
            public void itemStateChanged(final ItemEvent e) {
                updatePreview();
            }
        });


        grayscale.setText(Messages.getMessage("PdfViewerPrint.Grayscale"));
        grayscale.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        gbc.gridx=0;
        gbc.gridy=4;
        gbc.gridwidth=2;
        pageHandlingPanel.add(grayscale,gbc);
        grayscale.setMargin(new java.awt.Insets(0, 0, 0, 0));
        //grayscale.setBounds(20,137,300,15);
        grayscale.addItemListener(new ItemListener(){
            @Override
            public void itemStateChanged(final ItemEvent e) {
                updatePreview();
            }
        });

        tabbedPane.addTab(Messages.getMessage("PdfViewerPrintTab.handling"), pageHandlingPanel);
//        add(pageHandlingPanel);
//        pageHandlingPanel.setBounds(10, 300, 320, 170);
        /**
         * END Page Handling PANEL
         */

        /**
         * START Preview PANEL
         */
        previewPanel.setLayout(null);

        previewPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
                Messages.getMessage("PdfViewerLabel.PrintPreview"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11),
                Color.BLACK));

        previewPanel.add(previewComponent);
        previewComponent.setBounds(5,5,220,275);

        previewPanel.add(previewSlider);
        previewSlider.setBounds(5,280,220,40);
        previewSlider.setValue(1);
        updatePreview();

        add(previewPanel);
        previewPanel.setBounds(420, 7, 230, 330);
        /**
         * END Preview PANEL
         */



//        printToFile.setText(Messages.getMessage("PdfViewerPrint.PrintToFile"));
//        printToFile.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
//        printToFile.setMargin(new java.awt.Insets(0, 0, 0, 0));
//        add(printToFile);
//        printToFile.setBounds(20, 485, 160, 15);
//        printToFile.setEnabled(false);
        
        okButton.setText(Messages.getMessage("PdfMessage.Ok"));
        
        if(isFirstTime){
	        okButton.addActionListener(new java.awt.event.ActionListener() {
	            @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
	                okEvent();
	            }
	        });
        }

        add(okButton);
        okButton.setBounds(445, 348, 90, 23);

        cancelButton.setText(Messages.getMessage("PdfMessage.Cancel"));
        
        if(isFirstTime){
	        cancelButton.addActionListener(new java.awt.event.ActionListener() {
	            @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
	                cancelEvent();
	            }
	        });
        }

        add(cancelButton);
        cancelButton.setBounds(560, 348, 90, 23);


    }// </editor-fold>

    private static String[] getAvailableResolutions(final PrintService p) {
        final PrinterResolution[] resolutions = (PrinterResolution[])p.getSupportedAttributeValues(PrinterResolution.class, DocFlavor.SERVICE_FORMATTED.PAGEABLE, null);

        if (resolutions==null) {
            return new String[]{"Default"};
        }

        final String[] names = new String[resolutions.length];
        for (int i=0; i<resolutions.length; i++) {
            final PrinterResolution res = resolutions[i];
            names[i] = res.getCrossFeedResolution(PrinterResolution.DPI)+"x"+res.getFeedResolution(PrinterResolution.DPI)+" dpi";
        }

        return names;
    }

    @Override
    public PrinterResolution getResolution() {
        final PrintService[] ps = PrintServiceLookup.lookupPrintServices(null,null);
        PrintService p=null;
        for (final PrintService p1 : ps) {
            if (p1.getName().equals(printerName.getSelectedItem())) {
                p = p1;
            }
        }

        final PrinterResolution[] resolutions = ((PrinterResolution[])p.getSupportedAttributeValues(PrinterResolution.class, DocFlavor.SERVICE_FORMATTED.PAGEABLE, null));

        if (resolutions == null) {
            return null;
        }

        return resolutions[resolution.getSelectedIndex()];
    }

    private int getDefaultResolutionIndex() {
        //get print service
        final PrintService[] ps = PrintServiceLookup.lookupPrintServices(null,null);
        PrintService p=null;
        for (final PrintService p1 : ps) {
            if (p1.getName().equals(printerName.getSelectedItem())) {
                p = p1;
            }
        }

        //get available resolutions
        final PrinterResolution[] resolutions = (PrinterResolution[])p.getSupportedAttributeValues(PrinterResolution.class, DocFlavor.SERVICE_FORMATTED.PAGEABLE, null);

        if (resolutions == null) {
            return 0;
        }

        if (defaultResolution == -1) {
            defaultResolution = 600;
        }

        //find nearest resolution
        int minDiff = Integer.MAX_VALUE;
        int indexToUse = 0;
        for (int i=0; i<resolutions.length; i++) {
            final PrinterResolution res = resolutions[i];
            int cfDiff = res.getCrossFeedResolution(PrinterResolution.DPI)-defaultResolution;
            if (cfDiff < 0) {
                cfDiff = -cfDiff;
            }
            int fDiff = res.getFeedResolution(PrinterResolution.DPI)-defaultResolution;
            if (fDiff < 0) {
                fDiff = -fDiff;
            }

            if (cfDiff+fDiff < minDiff) {
                minDiff = cfDiff+fDiff;
                indexToUse = i;
            }
        }

        return indexToUse;
    }

    private void updateMargins() {

        final MarginPaper p = getSelectedPaper();

        if (p==null) {
            return;
        }

        //Update minimum values
        ((CustomSpinnerModel)left.getModel()).setMinValue(p.getMinX()*mmPerSubInch);
        ((CustomSpinnerModel)top.getModel()).setMinValue(p.getMinY()*mmPerSubInch);
        ((CustomSpinnerModel)right.getModel()).setMinValue((p.getWidth()-p.getMaxRX())*mmPerSubInch);
        ((CustomSpinnerModel)bottom.getModel()).setMinValue((p.getHeight()-p.getMaxBY())*mmPerSubInch);


        //Set values to min
        final Double a = (double) 0;
        left.setValue(a);
        top.setValue(a);
        right.setValue(a);
        bottom.setValue(a);

    }

    private void printPreview(final Graphics2D g2) {
        final int w = previewComponent.getWidth();
        final int h = previewComponent.getHeight();
        int pW,pH,iW,iH,iX,iY;    //values in 72ths of an inch
        int pageWidth, pageHeight;

        //In print current view use the visible area of the screen instead of the page heights
        if (printRangeCurrentView.isSelected()) {
            pageWidth = (int)(((PdfDecoder)pdf).getVisibleRect().getWidth()/(pdf.getScaling()));
            pageHeight = (int)(((PdfDecoder)pdf).getVisibleRect().getHeight()/(pdf.getScaling()));
        } else {
            pageWidth = pdf.getPdfPageData().getCropBoxWidth(currentPreviewedPage);
            pageHeight = pdf.getPdfPageData().getCropBoxHeight(currentPreviewedPage);
        }

        //set paper size and printable area
        if (paperSourceByPDF.isSelected()) {
            pW = pageWidth;                                                         //Paper width
            pH = pageHeight;                                                        //Paper height
            iW = pW;                                                                //Imageable area width
            iH = pH;                                                                //Imageable area height
            iX = 0;                                                                 //Imageable area start x
            iY = 0;                                                                 //Imageable area start y
        } else {
            final MarginPaper p = paperDefinitions.getSelectedPaper(pageSize.getSelectedItem());
            if (p==null) {
                g2.drawString(Messages.getMessage("PdfPrintPreview.Loading"), (w/2)-25, (h/2)-5);
                return;
            }
            pW = (int)p.getWidth();
            pH = (int)p.getHeight();
            iX = (int)p.getImageableX();
            iY = (int)p.getImageableY();
            iW = (int)p.getImageableWidth();
            iH = (int)p.getImageableHeight();
        }

        //check auto rotate
        if (autoRotateCenter.isSelected() && ((pageWidth>pageHeight && iW<iH) || (pageWidth<pageHeight && iW>iH))) {
            int temp;
            temp = pW;
            pW = pH;
            pH = temp;

            temp = iW;
            iW = iH;
            iH = temp;
            temp = iX;
            iX = iY;
            iY = temp;

            //flip
            iY = pH - iY - iH;
        }

        //Set offsets
        int lO = 25;
        int tO = 30;
        final int rO = 5;
        final int bO = 25;

        final double paperHeightInInches = pH/72d;
        final double paperWidthInInches = pW/72d;

        //Calculate scaling
        final double wScale = (double)(w-(lO+rO))/pW;
        final double hScale = (double)(h-(tO+bO))/pH;
        final double scale;
        if (wScale < hScale) {
            scale = wScale;
        } else {
            scale = hScale;
        }

        //Scale all values
        pW = (int)(scale*pW);
        pH = (int)(scale*pH);
        iX = (int)(scale*iX);
        iY = (int)(scale*iY);
        iW = (int)(scale*iW);
        iH = (int)(scale*iH);
        pageWidth = (int)(scale*pageWidth);
        pageHeight = (int)(scale*pageHeight);

        double pageScale = 1;
        if (printHandlingScaling.getSelectedIndex()==1 ||                                                 //Fit
                (printHandlingScaling.getSelectedIndex()==2 && (pageWidth>iW || pageHeight>iH))) {        //Reduce
            pageScale = (double)iW / pageWidth;
            if (((double)iH / pageHeight) < pageScale ) {
                pageScale = (double) iH / pageHeight;
            }

            pageWidth = (int)(pageScale*pageWidth);
            pageHeight = (int)(pageScale*pageHeight);
        }

        //Include any centering
        lO+=(w-(lO+rO+pW))/2;
        tO+=(h-(tO+bO+pH))/2;

        //Fill page background
        g2.setPaint(Color.WHITE);
        g2.fillRect(lO,tO,pW,pH);

        //Draw printable area
        g2.setPaint(Color.RED);
        g2.drawLine(lO+iX,tO,lO+iX,tO+pH);
        g2.drawLine(lO,tO+iY,lO+pW,tO+iY);
        g2.drawLine(lO+iW+iX,tO,lO+iW+iX,tO+pH);
        g2.drawLine(lO,tO+iH+iY,lO+pW,tO+iH+iY);

        //fudge printable area for image drawing
        iX++;
        iY++;
        iW--;
        iH--;

        g2.setPaint(Color.BLACK);

        //Draw width bar
        final NumberFormat f = NumberFormat.getNumberInstance();
        f.setMaximumFractionDigits(1);
        final String widthString = f.format(paperWidthInInches);
        int tLen = widthString.length()*3;

        g2.drawString(widthString, lO+(pW/2)-tLen,tO-5);
        g2.drawLine(lO,tO-15,lO,tO-5);
        g2.drawLine(lO+pW,tO-15,lO+pW,tO-5);
        g2.drawLine(lO,tO-10,(lO+(pW/2)-tLen)-6,tO-10);
        g2.drawLine((lO+(pW/2)+tLen)+6,tO-10,lO+pW,tO-10);
        g2.drawLine(lO,tO-10,lO+5,tO-15);
        g2.drawLine(lO,tO-10,lO+5,tO-5);
        g2.drawLine(lO+pW,tO-10,lO+pW-5,tO-15);
        g2.drawLine(lO+pW,tO-10,lO+pW-5,tO-5);

        //Draw height bar
        final String heightString = f.format(paperHeightInInches);
        tLen = heightString.length()*3;
        g2.drawString(heightString, (lO-12)-tLen, tO+(pH/2)+5);
        g2.drawLine(lO-15,tO,lO-5,tO);
        g2.drawLine(lO-15,tO+pH,lO-5,tO+pH);
        g2.drawLine(lO-10,tO,lO-10,(tO+(pH/2))-8);
        g2.drawLine(lO-10,((tO+(pH/2))+8),lO-10,tO+pH);
        g2.drawLine(lO-10,tO,lO-5,tO+5);
        g2.drawLine(lO-10,tO,lO-15,tO+5);
        g2.drawLine(lO-10,tO+pH,lO-15,tO+pH-5);
        g2.drawLine(lO-10,tO+pH,lO-5,tO+pH-5);

        //draw page
        try {
            BufferedImage img;

            //print current view uses current display on PdfDecoder
            if (printRangeCurrentView.isSelected()) {
                img = new BufferedImage((int)((PdfDecoder)pdf).getVisibleRect().getWidth(), (int)((PdfDecoder)pdf).getVisibleRect().getHeight(), BufferedImage.TYPE_INT_ARGB);
                final Graphics g = img.getGraphics();
                g.translate((int)-((PdfDecoder)pdf).getVisibleRect().getX(), (int)-((PdfDecoder)pdf).getVisibleRect().getY());

                //store border and background and restore after paint
                final Border bStore = ((PdfDecoder)pdf).getBorder();
                final Color cStore = ((PdfDecoder)pdf).getBackground();
                ((PdfDecoder)pdf).setBorder(BorderFactory.createEmptyBorder());
                ((PdfDecoder)pdf).setBackground(Color.WHITE);
                ((PdfDecoder)pdf).paintComponent(g);//
                ((PdfDecoder)pdf).setBorder(bStore);
                ((PdfDecoder)pdf).setBackground(cStore);
            } else {
                img = pdf.getPageAsImage(currentPreviewedPage);
            }

            if (grayscale.isSelected()) {
                img = ColorSpaceConvertor.convertColorspace(img, BufferedImage.TYPE_BYTE_GRAY);
            }

            g2.setClip(lO+iX,tO+iY,iW,iH);

            final int centeringX = (int)((iW-pageWidth)/2d);
            final int centeringY = (int)((iH-pageHeight)/2d);

            g2.drawImage(img,lO+iX+centeringX,tO+iY+centeringY,pageWidth,pageHeight,null);
        } catch(final PdfException e) {
            if (LogWriter.isOutput()) {
                LogWriter.writeLog("Caught a PDFException " + e);
            }
        }

        //Draw border
        g2.setClip(null);
        g2.drawRect(lO,tO,pW,pH);

        f.setMaximumFractionDigits(0);
        g2.drawString(Messages.getMessage("PdfPrintPreview.UnitScale")+f.format(pageScale*100)+ '%', 5, h-5);

    }


    private void updatePreview(){
        int selection = previewSlider.getValue();

        //check for illogical settings
        final SetOfIntegerSyntax set = getPrintRange();
        if (set == null) {

            //Illogical - preview nothing
            currentPreviewedPage=0;
            pagePrintCount=0;

        } else {

            final int[][] ranges = set.getMembers();

            //calculate length
            int count=0;
            for (final int[] range1 : ranges) {
                count += range1[1] - (range1[0] - 1);
            }
            final int[] pagesToPrint = new int[count];
            pagePrintCount = pagesToPrint.length;

            //populate array with page numbers
            count=0;
            for (final int[] range : ranges) {
                final int rangeLength = range[1] - (range[0] - 1);
                for (int j = 0; j < rangeLength; j++) {
                    pagesToPrint[count] = range[0] + j;
                    count++;
                }
            }

            //check selection value
            if (selection > pagePrintCount) {
                selection=1;
                previewSlider.setValue(1);
            }

            //Work out which page to preview
            if (printRangeReversePages.isSelected()) {
                currentPreviewedPage = pagesToPrint[pagesToPrint.length - selection];
            } else {
                currentPreviewedPage = pagesToPrint[selection - 1];
            }
        }

        //recalculate previewSlider
        previewSlider.setMaxValue(pagePrintCount);

        //redraw
        previewComponent.repaint();
    }


	private void pagesBoxPressed() {
        printRangeFrom.setSelected(true);
        printRangeSubset.setEnabled(true);
        printRangeReversePages.setEnabled(true);
        updatePreview();
    }

    private void pagesFromStateChanged() {
        if(printRangeFrom.isSelected()){
            printRangeSubset.setEnabled(true);
            printRangeReversePages.setEnabled(true);
            updatePreview();
        }
    }
    
    private void printRangeCurrentView() {
        if(printRangeCurrentView.isSelected()){
            printRangeSubset.setEnabled(false);
            printRangeReversePages.setEnabled(false);
            updatePreview();
        }
    }

    private void currentPageStateChanged() {
        if(printRangeCurrentPage.isSelected()){
            printRangeSubset.setEnabled(false);
            printRangeReversePages.setEnabled(false);
            updatePreview();
        }
    }

    private void allStateChanged() {
        if(printRangeAll.isSelected()){
            printRangeSubset.setEnabled(true);
            printRangeReversePages.setEnabled(true);
            updatePreview();
        }
    }

    private void cancelEvent() {
        okClicked = false;
        getTopLevelAncestor().setVisible(false);
    }                            

    private void okEvent() {
        okClicked = true;
	getTopLevelAncestor().setVisible(false);
    }                        
    
    
    // Variables declaration - do not modify
    private javax.swing.JCheckBox autoRotateCenter;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JSpinner left;
    private javax.swing.JSpinner right;
    private javax.swing.JSpinner top;
    private javax.swing.JSpinner bottom;
    private javax.swing.JComboBox resolution;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel pageHandlingPanel;
    private javax.swing.JPanel previewPanel;
    private javax.swing.JComponent previewComponent;
    private CustomSlider previewSlider;
    private javax.swing.JComboBox pageSize;
    private javax.swing.JTextField pagesFrom;
    private javax.swing.JTextField pagesTo;
    private javax.swing.JCheckBox paperSourceByPDF;
    private javax.swing.JCheckBox grayscale;
    private javax.swing.JSpinner printHandlingCopies;
    private javax.swing.JComboBox printHandlingScaling;
    private javax.swing.JRadioButton printRangeAll;
    private javax.swing.JRadioButton printRangeCurrentPage;
    private javax.swing.JRadioButton printRangeCurrentView;
    private javax.swing.JRadioButton printRangeFrom;
    private javax.swing.JPanel printRangePanel;
    private javax.swing.JCheckBox printRangeReversePages;
    private javax.swing.JComboBox printRangeSubset;
    //private javax.swing.JCheckBox printToFile;
    private javax.swing.JComboBox printerName;
    private javax.swing.JPanel printerPanel;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration

    /**
     * return range as SetOfIntegerSytax
     * - if you try to do something silly like print all
     *  even pages in rage 1-1 you will get null returned
     */
   @Override
   public SetOfIntegerSyntax getPrintRange(){
    	
       SetOfIntegerSyntax pageRange = null;
       
       if(printRangeAll.isSelected()){
    	   
    	   pageRange = new PageRanges(1, pageCount);
    	   
           if(printRangeSubset.getSelectedIndex() == 0) {
               return pageRange;
           }

           if(printRangeSubset.getSelectedIndex() == 1){
        	   StringBuilder membersStr = new StringBuilder();
               int i = -1;
               while ((i = pageRange.next(i)) != -1) {
                   if(i % 2 == 1){
                       membersStr.append(i).append(',');
                   }
               }
               
               String members=membersStr.toString();
               final StringBuilder sb = new StringBuilder(members);
               sb.deleteCharAt(members.length() - 1);
               members = sb.toString();
               
               pageRange = new PageRanges(members);
           }else if(printRangeSubset.getSelectedIndex() == 2){
        	   StringBuilder membersStr = new StringBuilder();
               int i = -1;
               while ((i = pageRange.next(i)) != -1) {
                   if(i % 2 == 0){
                       membersStr.append(i).append(',');
                   }
               }
               
               String members = membersStr.toString();
               final StringBuilder sb = new StringBuilder(members);
               sb.deleteCharAt(members.length() - 1);
               members = sb.toString();
               
               pageRange = new PageRanges(members);
           }
           
       }else if(printRangeCurrentPage.isSelected()){
    	   
           pageRange = new PageRanges(currentPage);
           
       }else if(printRangeCurrentView.isSelected()){    
           
    	   pageRange = new PageRanges(currentPage);
    	   
       }else if(printRangeFrom.isSelected()){

           int start, end;
           try {
               start = Integer.parseInt(pagesFrom.getText());
           } catch (final NumberFormatException e) {
               if(LogWriter.isOutput()) {
                   LogWriter.writeLog("Exception in setting page range "+e);
               }

               pagesFrom.setText("1");
               start = 1;
           }
           try {
               end = Integer.parseInt(pagesTo.getText());
           } catch(final NumberFormatException e) {

               if(LogWriter.isOutput()) {
                   LogWriter.writeLog("Exception in setting page range "+e);
               }

               pagesTo.setText(String.valueOf(pageCount));
               end = pageCount;
           }

           //Check values in range
           if (start < 0) {
               start = 1;
               pagesFrom.setText(""+1);
           } else if (start > pageCount) {
               start = pageCount;
               pagesFrom.setText(String.valueOf(pageCount));
           }
           if (end < 0) {
               end = 1;
               pagesTo.setText(""+1);
           } else if (end > pageCount) {
               end = pageCount;
               pagesTo.setText(String.valueOf(pageCount));
           }

           if(start>end){
        	   final int tmp=end;
        	   end=start;
        	   start=tmp;

               if(GUI.showMessages) {
                   JOptionPane.showMessageDialog(this, Messages.getMessage("PdfViewerPrint.SwapValues"));
               }
           }
           pageRange = new PageRanges(start,end);
           
           if(printRangeSubset.getSelectedIndex() == 0) {
               return pageRange;
           }

           if(printRangeSubset.getSelectedIndex() == 1){
        	   StringBuilder membersStr = new StringBuilder();
               int i = -1;
               while ((i = pageRange.next(i)) != -1) {
                   if(i % 2 == 1){
                       membersStr.append(i).append(',');
                   }
               }
               
               String members = membersStr.toString();
               final StringBuilder sb = new StringBuilder(members);
               if (members.isEmpty()) {
                   return null;
               }

               sb.deleteCharAt(members.length() - 1);
               members = sb.toString();
               
               pageRange = new PageRanges(members);
           }else if(printRangeSubset.getSelectedIndex() == 2){
        	   StringBuilder membersStr = new StringBuilder();
               int i = -1;
               while ((i = pageRange.next(i)) != -1) {
                   if(i % 2 == 0){
                       membersStr.append(i).append(',');
                   }
               }
               
               String members = membersStr.toString();
               final StringBuilder sb = new StringBuilder(members);
               final int length=members.length();
               if(length>0) {
                   sb.deleteCharAt(length - 1);
               }
               members = sb.toString();
               
               if(!members.isEmpty()) {
                   pageRange = new PageRanges(members);
               } else {
                   pageRange = null;
               }
           }
       }
       
       return pageRange;
    }
    
    @Override
    public int getCopies(){
    	final String copies = printHandlingCopies.getValue().toString();
    	return Integer.parseInt(copies);
    }
    
    /** return setting for type of scaling to use 
     * PAGE_SCALING_NONE,PAGE_SCALING_FIT_TO_PRINTER_MARGINS,PAGE_SCALING_REDUCE_TO_PRINTER_MARGINS
     *see org.jpedal.objects.contstants.PrinterOptions for all values
     */
    @Override
    public int getPageScaling(){
    	
    	final int option=printHandlingScaling.getSelectedIndex();
		
		int value=0;
		//make choice
		switch (option) {
		case 0: //No scaling
			value=PrinterOptions.PAGE_SCALING_NONE;
			break;
			
		case 1: //Fit to scaling
			value=PrinterOptions.PAGE_SCALING_FIT_TO_PRINTER_MARGINS;
			break;
			
		case 2: //Reduce to scaling
			value=PrinterOptions.PAGE_SCALING_REDUCE_TO_PRINTER_MARGINS;
			break;
			
		}
		
		//remember last option for next print dialog
		PrinterOptions.LAST_SCALING_CHOICE=value;
		
    	return value;
    }
    
    @Override
    public String getPrinter(){
    	
    	if(printerName==null) {
            return "";
        } else{
    		
    		if(printerName.getSelectedItem()==null) {
                return null;
            } else {
                return printerName.getSelectedItem().toString();
            }
    	}
    }
    
    @Override
    public boolean okClicked(){
    	return okClicked;
    }

    @Override
    public boolean isAutoRotateAndCenter(){
    	return autoRotateCenter.isSelected();
    }
    
    @Override
    public boolean isPaperSourceByPDFSize(){
    	return paperSourceByPDF.isSelected();
    }
    
    @Override
    public boolean isPrintingCurrentView(){
    	return printRangeCurrentView.isSelected();
    }
    
    @Override
    public String[] getAvailablePaperSizes(){
    	return paperDefinitions.getAvailablePaperSizes();
    }
    
    /**return selected Paper*/
    @Override
    public MarginPaper getSelectedPaper() {
        return paperDefinitions.getSelectedPaper(pageSize.getSelectedItem());
    }
    
    /**return printers default orientation*/
    @Override
    public int getSelectedPrinterOrientation() {
        return paperDefinitions.getDefaultPageOrientation();
    }
    
    @Override
    public boolean isPagesReversed(){
        return printRangeReversePages.isSelected();
    }

	@Override
    public boolean isOddPagesOnly() {
		return printRangeSubset.getSelectedIndex() == 1;
	}

	@Override
    public boolean isEvenPagesOnly() {
		return printRangeSubset.getSelectedIndex() == 2;
	}

    @Override
    public boolean isMonochrome() {
        return grayscale.isSelected();
    }

    private class CustomSlider extends JPanel {
        private int value=1, maxValue=100;
        private static final int rightMargin =9;
        private static final int leftMargin =9;
        private boolean dragging;

        CustomSlider() {
            addMouseMotionListener(new MouseMotionAdapter(){
                @Override
                public void mouseDragged(final MouseEvent e) {
                    if (dragging) {
                        value = (int)((((double)(e.getX()- leftMargin)/(getWidth()-(leftMargin+rightMargin)))*(maxValue-1))+1.5);
                        if (value > maxValue) {
                            value = maxValue;
                        }
                        if (value < 1) {
                            value = 1;
                        }
                        updatePreview();
                        repaint();
                    }
                }
            });
            addMouseListener(new MouseAdapter(){
                @Override
                public void mouseClicked(final MouseEvent e) {
                    if (e.getY()<20) {
                        final double newValue = (((double)(e.getX()-leftMargin)/(getWidth()-(leftMargin+rightMargin)))*(maxValue-1))+1;
                        if (newValue > value) {
                            value++;
                        } else if (newValue < value) {
                            value--;
                        }

                        if (value > maxValue) {
                            value = maxValue;
                        }
                        if (value < 1) {
                            value = 1;
                        }
                        updatePreview();
                        repaint();
                    }
                }

                @Override
                public void mousePressed(final MouseEvent e) {
                    if (e.getY()<20) {
                        dragging = true;
                    }
                }

                @Override
                public void mouseReleased(final MouseEvent e) {
                    dragging=false;
                }
            });
        }

        @Override
        public void paint(final Graphics g) {
            final Graphics2D g2 = (Graphics2D)g;
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

            final int w = this.getWidth();
            final int h = this.getHeight();

            //fill background
            g2.setPaint(new Color(240,240,240));
            g2.fillRect(0,0,w,h);

            //draw text
            g2.setPaint(Color.BLACK);
            g2.drawString(Messages.getMessage("PdfPrintPreview.Sheet")+value+Messages.getMessage("PdfPrintPreview.SheetOf")+maxValue, 2, h-3);

            //draw line
            g2.setPaint(Color.LIGHT_GRAY);
            g2.fillRect(leftMargin +1, 11, w-((leftMargin+rightMargin)+1), 3);
            g2.setPaint(Color.GRAY);
            g2.drawLine(leftMargin, 12, w- rightMargin, 12);

            //draw knob
            final float pageX = leftMargin +(((float)(value-1)/(maxValue-1))*(w-(leftMargin+rightMargin)));
            final Shape number = new Ellipse2D.Float(pageX-6, 6.5f, 12, 12);
            final Shape number2 = new Ellipse2D.Float(pageX-4, 8.5f, 8, 8);
            g2.setPaint(Color.BLACK);
            g2.fill(number);
            g2.setPaint(Color.WHITE);
            g2.fill(number2);
        }

        public void setValue(final int value) {
            this.value = value;
            repaint();
        }

        public void setMaxValue(final int maxValue) {
            if (maxValue!=this.maxValue) {
                value = 1;
                this.maxValue = maxValue;
                updatePreview();
                return;
            }
            this.maxValue = maxValue;
            repaint();
        }

        public int getValue() {
            return value;
        }
    }

    private static class CustomSpinnerModel extends SpinnerNumberModel {
        private double value;
        private final ArrayList listeners = new ArrayList();
        private double minValue;

        @Override
        public Object getPreviousValue() {
            if (value <= minValue) {
                return null;
            }
            if (value-0.5<minValue) {
                return minValue;
            }
            return value - 0.5;
        }
        @Override
        public Object getNextValue() {
            return value + 0.5;
        }
        @Override
        public Object getValue() {
            return value;
        }
        @Override
        public void addChangeListener(final ChangeListener l) {
            listeners.add(l);
        }
        @Override
        public void removeChangeListener(final ChangeListener l) {
            listeners.remove(l);
        }
        @Override
        public void setValue(final Object value) {
            try {
                final double newValue = (Double) value;
                if (newValue < minValue) {
                    this.value = minValue;
                } else {
                    this.value = newValue;
                }
            } catch (final Exception e) {

                if(LogWriter.isOutput()) {
                    LogWriter.writeLog("Exception in setting print value "+e);
                }

                throw new IllegalArgumentException();
            }
            final ChangeEvent e = new ChangeEvent(this);
            for (final Object listener : listeners) {
                ((ChangeListener) listener).stateChanged(e);
            }
        }
        public void setMinValue(final double minValue) {
            this.minValue = minValue;
            setValue(getValue());
        }
    }
}
